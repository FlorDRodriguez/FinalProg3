/// <reference types="node" />
/// <reference types="node" />
import type { Writable } from 'stream';
import type { CommandFailedEvent, CommandStartedEvent, CommandSucceededEvent } from './cmap/command_monitoring_events';
import type { ConnectionCheckedInEvent, ConnectionCheckedOutEvent, ConnectionCheckOutFailedEvent, ConnectionCheckOutStartedEvent, ConnectionClosedEvent, ConnectionCreatedEvent, ConnectionPoolClearedEvent, ConnectionPoolClosedEvent, ConnectionPoolCreatedEvent, ConnectionPoolReadyEvent, ConnectionReadyEvent } from './cmap/connection_pool_events';
/** @internal */
export declare const SeverityLevel: Readonly<{
    readonly EMERGENCY: "emergency";
    readonly ALERT: "alert";
    readonly CRITICAL: "critical";
    readonly ERROR: "error";
    readonly WARNING: "warn";
    readonly NOTICE: "notice";
    readonly INFORMATIONAL: "info";
    readonly DEBUG: "debug";
    readonly TRACE: "trace";
    readonly OFF: "off";
}>;
/** @internal */
export declare const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;
/** @internal */
export type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];
/** @internal */
declare class SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {
    constructor(entries: [SeverityLevel | number, SeverityLevel | number][]);
    getNumericSeverityLevel(severity: SeverityLevel): number;
    getSeverityLevelName(level: number): SeverityLevel | undefined;
}
/** @internal */
export declare const SEVERITY_LEVEL_MAP: SeverityLevelMap;
/** @internal */
export declare const MongoLoggableComponent: Readonly<{
    readonly COMMAND: "command";
    readonly TOPOLOGY: "topology";
    readonly SERVER_SELECTION: "serverSelection";
    readonly CONNECTION: "connection";
}>;
/** @internal */
export type MongoLoggableComponent = (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];
/** @internal */
export interface MongoLoggerEnvOptions {
    /** Severity level for command component */
    MONGODB_LOG_COMMAND?: string;
    /** Severity level for topology component */
    MONGODB_LOG_TOPOLOGY?: string;
    /** Severity level for server selection component */
    MONGODB_LOG_SERVER_SELECTION?: string;
    /** Severity level for CMAP */
    MONGODB_LOG_CONNECTION?: string;
    /** Default severity level to be if any of the above are unset */
    MONGODB_LOG_ALL?: string;
    /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */
    MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;
    /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */
    MONGODB_LOG_PATH?: string;
}
/** @internal */
export interface MongoLoggerMongoClientOptions {
    /** Destination for log messages */
    mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;
}
/** @internal */
export interface MongoLoggerOptions {
    componentSeverities: {
        /** Severity level for command component */
        command: SeverityLevel;
        /** Severity level for topology component */
        topology: SeverityLevel;
        /** Severity level for server selection component */
        serverSelection: SeverityLevel;
        /** Severity level for connection component */
        connection: SeverityLevel;
        /** Default severity level to be used if any of the above are unset */
        default: SeverityLevel;
    };
    /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */
    maxDocumentLength: number;
    /** Destination for log messages. */
    logDestination: Writable | MongoDBLogWritable;
}
/** @internal */
export declare function createStdioLogger(stream: {
    write: NodeJS.WriteStream['write'];
}): MongoDBLogWritable;
/** @internal */
export interface Log extends Record<string, any> {
    t: Date;
    c: MongoLoggableComponent;
    s: SeverityLevel;
    message?: string;
}
/** @internal */
export interface MongoDBLogWritable {
    write(log: Log): void;
}
/** @internal */
export type LoggableEvent = CommandStartedEvent | CommandSucceededEvent | CommandFailedEvent | ConnectionPoolCreatedEvent | ConnectionPoolReadyEvent | ConnectionPoolClosedEvent | ConnectionPoolClearedEvent | ConnectionCreatedEvent | ConnectionReadyEvent | ConnectionClosedEvent | ConnectionCheckedInEvent | ConnectionCheckedOutEvent | ConnectionCheckOutStartedEvent | ConnectionCheckOutFailedEvent;
/** @internal */
export interface LogConvertible extends Record<string, any> {
    toLog(): Record<string, any>;
}
/** @internal */
export declare function stringifyWithMaxLen(value: any, maxDocumentLength: number): string;
/** @internal */
export type Loggable = LoggableEvent | LogConvertible;
/** @internal */
export declare class MongoLogger {
    componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;
    maxDocumentLength: number;
    logDestination: MongoDBLogWritable | Writable;
    /**
     * This method should be used when logging errors that do not have a public driver API for
     * reporting errors.
     */
    error: (component: MongoLoggableComponent, message: string | Loggable) => void;
    /**
     * This method should be used to log situations where undesirable application behaviour might
     * occur. For example, failing to end sessions on `MongoClient.close`.
     */
    warn: (component: MongoLoggableComponent, message: string | Loggable) => void;
    /**
     * This method should be used to report high-level information about normal driver behaviour.
     * For example, the creation of a `MongoClient`.
     */
    info: (component: MongoLoggableComponent, message: string | Loggable) => void;
    /**
     * This method should be used to report information that would be helpful when debugging an
     * application. For example, a command starting, succeeding or failing.
     */
    debug: (component: MongoLoggableComponent, message: string | Loggable) => void;
    /**
     * This method should be used to report fine-grained details related to logic flow. For example,
     * entering and exiting a function body.
     */
    trace: (component: MongoLoggableComponent, message: string | Loggable) => void;
    constructor(options: MongoLoggerOptions);
    private log;
    /**
     * Merges options set through environment variables and the MongoClient, preferring environment
     * variables when both are set, and substituting defaults for values not set. Options set in
     * constructor take precedence over both environment variables and MongoClient options.
     *
     * @remarks
     * When parsing component severity levels, invalid values are treated as unset and replaced with
     * the default severity.
     *
     * @param envOptions - options set for the logger from the environment
     * @param clientOptions - options set for the logger in the MongoClient options
     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger
     */
    static resolveOptions(envOptions: MongoLoggerEnvOptions, clientOptions: MongoLoggerMongoClientOptions): MongoLoggerOptions;
}
export {};
//# sourceMappingURL=mongo_logger.d.ts.map