import type { BSONSerializeOptions, Document } from '../bson';
import { type Db } from '../db';
import type { ReadPreferenceLike } from '../read_preference';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import { AbstractOperation } from './operation';
/** @public */
export type RunCommandOptions = {
    /** Specify ClientSession for this command */
    session?: ClientSession;
    /** The read preference */
    readPreference?: ReadPreferenceLike;
} & BSONSerializeOptions;
/** @internal */
export declare class RunCommandOperation<T = Document> extends AbstractOperation<T> {
    command: Document;
    options: RunCommandOptions;
    constructor(parent: Db, command: Document, options: RunCommandOptions);
    execute(server: Server, session: ClientSession | undefined): Promise<T>;
}
export declare class RunAdminCommandOperation<T = Document> extends AbstractOperation<T> {
    command: Document;
    options: RunCommandOptions & {
        noResponse?: boolean;
        bypassPinningCheck?: boolean;
    };
    constructor(command: Document, options: RunCommandOptions & {
        noResponse?: boolean;
        bypassPinningCheck?: boolean;
    });
    execute(server: Server, session: ClientSession | undefined): Promise<T>;
}
//# sourceMappingURL=run_command.d.ts.map