/// <reference types="node" />
/// <reference types="node" />
import type { Socket } from 'net';
import type { TLSSocket } from 'tls';
import type { Document } from '../bson';
import { type Callback } from '../utils';
import { AuthContext, type AuthProvider } from './auth/auth_provider';
import { Connection, type ConnectionOptions } from './connection';
import type { ClientMetadata } from './handshake/client_metadata';
/** @internal */
export declare const AUTH_PROVIDERS: Map<string, AuthProvider>;
/** @public */
export type Stream = Socket | TLSSocket;
export declare function connect(options: ConnectionOptions, callback: Callback<Connection>): void;
export interface HandshakeDocument extends Document {
    /**
     * @deprecated Use hello instead
     */
    ismaster?: boolean;
    hello?: boolean;
    helloOk?: boolean;
    client: ClientMetadata;
    compression: string[];
    saslSupportedMechs?: string;
    loadBalanced?: boolean;
}
/**
 * @internal
 *
 * This function is only exposed for testing purposes.
 */
export declare function prepareHandshakeDocument(authContext: AuthContext): Promise<HandshakeDocument>;
/** @public */
export declare const LEGAL_TLS_SOCKET_OPTIONS: readonly ["ALPNProtocols", "ca", "cert", "checkServerIdentity", "ciphers", "crl", "ecdhCurve", "key", "minDHSize", "passphrase", "pfx", "rejectUnauthorized", "secureContext", "secureProtocol", "servername", "session"];
/** @public */
export declare const LEGAL_TCP_SOCKET_OPTIONS: readonly ["family", "hints", "localAddress", "localPort", "lookup"];
//# sourceMappingURL=connect.d.ts.map