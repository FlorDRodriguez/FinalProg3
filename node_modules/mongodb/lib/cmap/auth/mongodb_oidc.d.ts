/// <reference types="node" />
import type { Document } from 'bson';
import type { HandshakeDocument } from '../connect';
import type { Connection } from '../connection';
import { type AuthContext, AuthProvider } from './auth_provider';
import type { MongoCredentials } from './mongo_credentials';
/**
 * @public
 * @experimental
 */
export interface IdPServerInfo {
    issuer: string;
    clientId: string;
    requestScopes?: string[];
}
/**
 * @public
 * @experimental
 */
export interface IdPServerResponse {
    accessToken: string;
    expiresInSeconds?: number;
    refreshToken?: string;
}
/**
 * @public
 * @experimental
 */
export interface OIDCCallbackContext {
    refreshToken?: string;
    timeoutSeconds?: number;
    timeoutContext?: AbortSignal;
    version: number;
}
/**
 * @public
 * @experimental
 */
export type OIDCRequestFunction = (info: IdPServerInfo, context: OIDCCallbackContext) => Promise<IdPServerResponse>;
/**
 * @public
 * @experimental
 */
export type OIDCRefreshFunction = (info: IdPServerInfo, context: OIDCCallbackContext) => Promise<IdPServerResponse>;
type ProviderName = 'aws' | 'azure' | 'callback';
export interface Workflow {
    /**
     * All device workflows must implement this method in order to get the access
     * token and then call authenticate with it.
     */
    execute(connection: Connection, credentials: MongoCredentials, reauthenticating: boolean, response?: Document): Promise<Document>;
    /**
     * Get the document to add for speculative authentication.
     */
    speculativeAuth(credentials: MongoCredentials): Promise<Document>;
}
/** @internal */
export declare const OIDC_WORKFLOWS: Map<ProviderName, Workflow>;
/**
 * OIDC auth provider.
 * @experimental
 */
export declare class MongoDBOIDC extends AuthProvider {
    /**
     * Instantiate the auth provider.
     */
    constructor();
    /**
     * Authenticate using OIDC
     */
    auth(authContext: AuthContext): Promise<void>;
    /**
     * Add the speculative auth for the initial handshake.
     */
    prepare(handshakeDoc: HandshakeDocument, authContext: AuthContext): Promise<HandshakeDocument>;
}
export {};
//# sourceMappingURL=mongodb_oidc.d.ts.map