import type { Connection } from '../../connection';
import type { MongoCredentials } from '../mongo_credentials';
import type { OIDCRefreshFunction, OIDCRequestFunction } from '../mongodb_oidc';
import { Cache } from './cache';
/**
 * An entry of callbacks in the cache.
 */
interface CallbacksEntry {
    requestCallback: OIDCRequestFunction;
    refreshCallback?: OIDCRefreshFunction;
    callbackHash: string;
}
/**
 * A cache of request and refresh callbacks per server/user.
 */
export declare class CallbackLockCache extends Cache<CallbacksEntry> {
    /**
     * Get the callbacks for the connection and credentials. If an entry does not
     * exist a new one will get set.
     */
    getEntry(connection: Connection, credentials: MongoCredentials): CallbacksEntry;
    /**
     * Set locked callbacks on for connection and credentials.
     */
    private addEntry;
    /**
     * Create a cache key from the address and username.
     */
    cacheKey(address: string, username: string, callbackHash: string): string;
}
export {};
//# sourceMappingURL=callback_lock_cache.d.ts.map