import { type Document } from 'bson';
import type { Connection } from '../../connection';
import type { MongoCredentials } from '../mongo_credentials';
import type { Workflow } from '../mongodb_oidc';
import { CallbackLockCache } from './callback_lock_cache';
import { TokenEntryCache } from './token_entry_cache';
/**
 * OIDC implementation of a callback based workflow.
 * @internal
 */
export declare class CallbackWorkflow implements Workflow {
    cache: TokenEntryCache;
    callbackCache: CallbackLockCache;
    /**
     * Instantiate the workflow
     */
    constructor();
    /**
     * Get the document to add for speculative authentication. This also needs
     * to add a db field from the credentials source.
     */
    speculativeAuth(credentials: MongoCredentials): Promise<Document>;
    /**
     * Execute the OIDC callback workflow.
     */
    execute(connection: Connection, credentials: MongoCredentials, reauthenticating: boolean, response?: Document): Promise<Document>;
    /**
     * Starts the callback authentication process. If there is a speculative
     * authentication document from the initial handshake, then we will use that
     * value to get the issuer, otherwise we will send the saslStart command.
     */
    private startAuthentication;
    /**
     * Finishes the callback authentication process.
     */
    private finishAuthentication;
    /**
     * Fetches an access token using either the request or refresh callbacks and
     * puts it in the cache.
     */
    private fetchAccessToken;
}
//# sourceMappingURL=callback_workflow.d.ts.map