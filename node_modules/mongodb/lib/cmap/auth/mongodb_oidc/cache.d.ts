/**
 * An entry in a cache that can expire in a certain amount of time.
 */
export declare abstract class ExpiringCacheEntry {
    expiration: number;
    /**
     * Create a new expiring token entry.
     */
    constructor(expiration: number);
    /**
     * The entry is still valid if the expiration is more than
     * 5 minutes from the expiration time.
     */
    isValid(): boolean;
    /**
     * Get an expiration time in milliseconds past epoch.
     */
    private expirationTime;
}
/**
 * Base class for OIDC caches.
 */
export declare abstract class Cache<T> {
    entries: Map<string, T>;
    /**
     * Create a new cache.
     */
    constructor();
    /**
     * Clear the cache.
     */
    clear(): void;
    /**
     * Implement the cache key for the token.
     */
    abstract cacheKey(address: string, username: string, callbackHash: string): string;
    /**
     * Create a cache key from the address and username.
     */
    hashedCacheKey(address: string, username: string, callbackHash: string): string;
}
//# sourceMappingURL=cache.d.ts.map