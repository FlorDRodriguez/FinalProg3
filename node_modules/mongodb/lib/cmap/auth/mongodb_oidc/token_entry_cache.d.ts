import type { IdPServerInfo, IdPServerResponse } from '../mongodb_oidc';
import { Cache, ExpiringCacheEntry } from './cache';
/** @internal */
export declare class TokenEntry extends ExpiringCacheEntry {
    tokenResult: IdPServerResponse;
    serverInfo: IdPServerInfo;
    /**
     * Instantiate the entry.
     */
    constructor(tokenResult: IdPServerResponse, serverInfo: IdPServerInfo, expiration: number);
}
/**
 * Cache of OIDC token entries.
 * @internal
 */
export declare class TokenEntryCache extends Cache<TokenEntry> {
    /**
     * Set an entry in the token cache.
     */
    addEntry(address: string, username: string, callbackHash: string, tokenResult: IdPServerResponse, serverInfo: IdPServerInfo): TokenEntry;
    /**
     * Delete an entry from the cache.
     */
    deleteEntry(address: string, username: string, callbackHash: string): void;
    /**
     * Get an entry from the cache.
     */
    getEntry(address: string, username: string, callbackHash: string): TokenEntry | undefined;
    /**
     * Delete all expired entries from the cache.
     */
    deleteExpiredEntries(): void;
    /**
     * Create a cache key from the address and username.
     */
    cacheKey(address: string, username: string, callbackHash: string): string;
}
//# sourceMappingURL=token_entry_cache.d.ts.map