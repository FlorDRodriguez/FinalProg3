import { type Document } from 'bson';
import type { Connection } from '../../connection';
import type { MongoCredentials } from '../mongo_credentials';
import type { Workflow } from '../mongodb_oidc';
/**
 * Common behaviour for OIDC device workflows.
 * @internal
 */
export declare abstract class ServiceWorkflow implements Workflow {
    /**
     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment
     * and then attempts to read the token from that path.
     */
    execute(connection: Connection, credentials: MongoCredentials): Promise<Document>;
    /**
     * Get the document to add for speculative authentication.
     */
    speculativeAuth(credentials: MongoCredentials): Promise<Document>;
    /**
     * Get the token from the environment or endpoint.
     */
    abstract getToken(credentials: MongoCredentials): Promise<string>;
}
/**
 * Create the saslStart command document.
 */
export declare function commandDocument(token: string): Document;
//# sourceMappingURL=service_workflow.d.ts.map